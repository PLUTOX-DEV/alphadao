
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import RichTextEditor from './RichTextEditor';
import { Input } from "../components/ui/input";
import {Button} from '../components/ui/button';
import { useBlog } from './context/BlogContext';
import { BlogPost } from '../types';

const BlogEditor: React.FC = () => {
    const { createNewBlogPost, saveAsDraft, isAuthenticated, loading, error } = useBlog();
    const navigate = useNavigate();

    const [title, setTitle] = useState<string>('');
    const [author, setAuthor] = useState<string>('');
    const [description, setDescription] = useState<string>('');
    const [imageUrl, setImageUrl] = useState<string>('');
    const [tags, setTags] = useState<string>('');
    const [content, setContent] = useState<string>('');

    const handlePublish = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {
        e.preventDefault();
        if (!isAuthenticated) {
            alert('You must be logged in to publish a post.');
            return;
        }

        const postData: Omit<BlogPost, 'id'> = { // Use Omit to exclude 'id' as it's generated by backend
            title,
            author,
            description,
            imageUrl,
            tags: tags.split(',').map(tag => tag.trim()).filter(tag => tag),
            content,
            published: true,
            createdAt: new Date().toISOString(),
        };

        const success = await createNewBlogPost(postData);
        if (success) {
            alert('Blog post published successfully!');
            navigate('/blog');
        } else {
            alert('Failed to publish blog post. Please try again.');
        }
    };

    const handleSaveDraft = async (e: React.MouseEvent<HTMLButtonElement>): Promise<void> => {
        e.preventDefault();
        if (!isAuthenticated) {
            alert('You must be logged in to save a draft.');
            return;
        }

        const draftData: Omit<BlogPost, 'id'> = {
            title,
            author,
            description,
            imageUrl,
            tags: tags.split(',').map(tag => tag.trim()).filter(tag => tag),
            content,
            published: false,
            createdAt: new Date().toISOString(),
        };

        const success = await saveAsDraft(draftData);
        if (success) {
            alert('Blog post saved as draft!');
        } else {
            alert('Failed to save draft. Please try again.');
        }
    };

    if (!isAuthenticated) {
        return (
            <div className="max-w-md mx-auto my-10 p-6 bg-red-100 border border-red-400 text-red-700 rounded-lg text-center font-medium">
                You must be logged in to create or edit blog posts.
            </div>
        );
    }

    return (
        <div className="max-w-3xl mx-auto my-8 p-6 bg-white rounded-lg shadow-xl">
            <h2 className="text-3xl font-bold text-center text-gray-800 mb-6">Create New Blog Post</h2>
            <form onSubmit={handlePublish}>
                <Input
                    
                    id="title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="Enter blog post title"
                    required
                />
                { <Input
                    
                    id="author"
                    value={author}
                    onChange={(e) => setAuthor(e.target.value)}
                    placeholder="Enter author name"
                    required
                /> }
                <Input
                    
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Brief description for the post list"
                    required
                />
                <Input
                    
                    id="imageUrl"
                    type="url"
                    value={imageUrl}
                    onChange={(e) => setImageUrl(e.target.value)}
                    placeholder="URL for the main image (optional)"
                />
                 <Input
                    
                    id="tags"
                    value={tags}
                    onChange={(e) => setTags(e.target.value)}
                    placeholder="e.g., web3, blockchain, marketing"
                />

                <div className="mb-6">
                    <label className="block text-gray-700 text-sm font-bold mb-2">Blog Content</label>
                    <RichTextEditor value={content} onChange={setContent} />
                </div>

                {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <strong className="font-bold">Error!</strong>
                    <span className="block sm:inline ml-2">{error}</span>
                </div>}

                <div className="flex justify-end gap-4 mt-6">
                    <Button type="submit" disabled={loading}>
                        {loading ? 'Publishing...' : 'Publish Post'}
                    </Button>
                    <Button
                        type="button"
                        onClick={handleSaveDraft}
                        disabled={loading}
                        className="!bg-gray-500 hover:!bg-gray-600"
                    >
                        {loading ? 'Saving Draft...' : 'Save as Draft'}
                    </Button>
                </div>
            </form>
        </div>
    );
};

export default BlogEditor;